:root{
    --blanco: #ffffff;
    --oscuro: #212121;
    --primario: #ffc107;
    --secundario: #0097a7;
    --gris: #757575;
    --grisClaro: #DFE9F3;
    

} /* los que inicien con ":", son pseudoelementos que no exiten en el código html,
pero sin embargo, ":root" es como una forma de almacenar variables de css que son conocidas como: custom properties   */

/* Globales*/
html{
    font-size: 62.5%;
    box-sizing: border-box; /* Hack para Box model */
    scroll-snap-type: y mandatory; /** Para hacer un scroll de manera vertical, si fuera horizontal, en vez de y, seria x**/
    
}

/** Scroll Snap **/
.servicios,
.navegacion-principal,
.formulario{
    scroll-snap-align: center;
    scroll-snap-stop: always;
}

*, *:before, *:after {
    box-sizing: inherit;
}

body {
    font-size: 16px; /* 1rem = 10 px */
    font-family: 'Krub', sans-serif;
    background-image: linear-gradient(to top, var(--grisClaro) 0%, var(--blanco) 100%); /* esto sirve para hacer el degradado del color de fondo
     to top (de abajo a arriba), el color de abajo + 0%, el color de arriba 100%*/
     
}

.contenedor{
    max-width: 120rem;
    margin: 0 auto; /** para centrar horizontalmente, cuando usar margin 0 auto o justify content, cuando el contenedor padre no tenga un display:flex,
    **/
}

.boton{
    background-color: var(--secundario);
    color: var(--blanco);
    text-decoration: none;
    padding: 1rem 3rem;
    margin-top: 3rem;
    font-size: 2rem;
    text-transform: uppercase; /* poner en mayúscyla el texto*/
    font-weight: bold; /* hacer el texto mas grueso*/
    border-radius: .5rem; /* poner border a los botones*/
    width: 90%;
    text-align: center;
    border: none
}

@media (min-width: 768px) {
    .boton{
        width: auto; /* se reinicia*/
    }   
}

.boton:hover{
    cursor: pointer;
}

.sombra{
    /*
    -webkit-box-shadow: 0px 5px 15px 0px rgba(112,112,112,0.48); esto era para chrome, el webkit era para algo necesario cuando no estaba bien soportado en ese navegador, igual pasa abajo
    -moz-box-shadow: 0px 5px 15px 0px rgba(112,112,112,0.48); esto para firefox, los dos de arriba ya no necesario
    */
    box-shadow: 0px 5px 15px 0px rgba(112,112,112,0.48);
    background-color: var(--blanco);
    padding: 2rem;
    border-radius: 1rem;
}
/* Tipografía*/

h1 {
    font-size: 3.8rem;

}

h2 {
    font-size: 2.8rem;

}

h3 {
    font-size: 1.8rem;

}

h1,h2,h3 {
    text-align: center;
}

/* Títulos*/

.titulo span{
    font-size: 2rem;
}

/* Utilidades */
.w-sm-100{
    width: 100%;
}

@media (min-width: 768px) {
    .w-sm-100{
        width: auto;
    }
    
}

.flex{
    display: flex;
}

.alinear-derecha{
    justify-content: flex-end;

}

/* Navegación principal*/

.nav-bg{
    background-color: var(--secundario);
}

.navegacion-principal{
    display: flex; /* siempre al elemento padre de lo que deseas alinear, nada cambia con solo poner eso, pero nos habilita otras funciones, como la de abajo*/
    flex-direction: column;
 

}

/* 480px (para celulares), 768px (para tablet), 1140px (laptop, computadora de escritorio), 1400px*/
@media (min-width: 768px) {
    .navegacion-principal{
        flex-direction: row;
        justify-content: space-between; /* trabaja horizontalmente y para distribuir contenido, empieza con space*/
    }

    
}

.navegacion-principal a{
    display: block;
    text-align: center;
    color: var(--blanco);
    text-decoration: none;
    font-size: 2rem;
    font-weight: 700;
    padding: 1rem;
   
}

.navegacion-principal a:hover{
    background-color: var(--primario);
    color: var(--oscuro);
}

/* Hero */
.hero {
    background-image: url(../img/hero.jpg);
    background-repeat: no-repeat;
    background-size: cover;
    height: 450px;
    position: relative; /* El contenedor padre debe tener position: relative, para que el hijo se pueda posicionar de forma absoluta, hero es como
    el mapa para saber donde .contenido-hero vamos a colocarlo*/
    margin-bottom: 2rem;
}

/* Efecto opacidad de imagen*/

.contenido-hero{
    position: absolute;
    background-color: rgba(0,0,0,.7); /* para la opacidad de la imagen utilizamos rbga, donde a se refiere "a" la opacidad, donde 1 siginifica visible completamente, y 0 invisible, varian entre 0 a 1
    lo de arriba es la forma antigua, esta es la forma nueva rgb(0 0 0 / 70%);, aunque no tiene mucho soporte*/
    width: 100%; /*tambien se puede utilizar top: 0px; bottom: 0px; left: 0px; right: 0px son coordenadas, para que todo el elemento entre en .hero*/
    height: 100%; 

    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;

}

.contenido-hero h2,.contenido-hero p{
    color: var(--blanco);

}

.contenido-hero .ubicacion{
    display: flex;
    align-items: flex-end;
}


/* Servicios */

@media (min-width: 768px) {
    .servicios{
        display: grid;
        grid-template-columns: repeat(3, 1fr);/* es igual que poner 33.3% 33.3% 33.3%, ya que queremos que ocupe el 100% del elemento
         grid-template-columns: 1fr 1fr 1fr 1fr;, lo de arriba es una manera mas corta de hacerlo, es como padding, margin, tiene mas propiedades
        */
        column-gap: 1rem; /* separacion entra los costados de las cajas (todo esto en grid)*/
        margin-top: 2rem;
        margin-bottom: 2rem;

        
    }
}

.servicio{
    display: flex;
    flex-direction: column;
    align-items: center;

}

.servicio h3{
    color: var(--secundario);
    font-weight: normal;
    
}

.servicio p{
    line-height: 2; /* para el interlineado*/
    text-align: center;
    margin-top: 1rem;
}
.servicio .iconos{
    height: 15rem;
    width: 15rem;
    background-color: var(--primario);
    border-radius: 50%; /* si tenemos un cuadrado, como el caso de arriba, con poner "border-radius: 50%, se hace un circulo perfecto*/
    display: flex;
    justify-content: space-evenly;
    align-items: center;
}

/* Contacto */
.formulario{
    background-color: var(--gris);
    width: min( 60rem, 100%); /** Utiliza el valor mas pequeño*, nos ahorra media queries*/
    margin: 0 auto; /** para centrar horizontalmente, cuando usar margin 0 auto o justify content, cuando el contenedor padre no tenga un display:flex,
    **/ 
    padding: 2rem;
    border-radius: 1rem;
    margin-top: 2rem;

}

.formulario fieldset{
    border: none;
}

.formulario legend{
    text-align: center;
    font-size: 1.8rem;
    text-transform: uppercase;
    font-weight: 700;
    margin-bottom: 2rem;
    color: var(--primario);
}

@media (min-width: 768px) {
    .contenedor-campos{
        display: grid;
        grid-template-columns: 50% 50%;
        grid-template-rows: auto auto 20rem;
        column-gap: 1rem; /** Separacion de columnas **/
    
    }
    .campo:nth-child(3),
    .campo:nth-child(4) {/** si hay 4 clases que se llaman igual y quieres seleccionar uno en especifico, puedes hacerlo con esta propiedad, seleccionamos el 3, porque queremos,
    modificar el campo correo**/
    grid-column: 1 / 3; /** posicionar elemento**/

    }
    
}

.campo{
    margin-bottom: 1rem;

}

.campo label{
    color: var(--blanco);
    margin-bottom: .5rem;
    font-weight: bold;
    display: block;

}

.campo textarea{
    height: 20rem; /** Para ensanchar el textarea**/
}

.input-text{
    width: 100%;
    border: none;
    padding: 1.5rem;
    border-radius: .5rem;
}

.enviar .boton{ /** todo lo que el .boton tenga arriba lo sigo requiriendo, pero si tiene la clase de enviar, como en este caso, entonces quiero que ese boton,
    tome un ancho del 100%**/
    width: 100%;
}

/** Footer **/
.footer{
    text-align: center;
    margin-top: 2rem;
    margin-bottom: 2rem;
}
   